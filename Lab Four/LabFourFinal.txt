#Question One

x=int(input('Enter an integer: '))
y = 0

while y**4 < abs(x):
    y = y + 1
if y**4 != abs(x):
    print (x, 'is not a fourth root')
else:
    if x < 0:
        y = -y
    print ('fourth root of ' + str(x) + ' is ' + str(y))




#Question Two

num = int(input("Enter an integer: "))
pwr = 2
root = 0 
numList = [] 
found = False
if num < 0:
    neg = True
else:
    neg = False
while pwr < 6:
    while abs(root**pwr) <= abs(num):
        if root**pwr == num:
            numList += [[root, pwr]]
            found = True
        if abs(root) > abs(num):
            root = 0
        elif neg:
            root -= 1
        else:
            root +=1
    pwr += 1
    root = 0
    
print(numList)
if not found:
    print("No pair of integers, 'root' and 'pwr', exists such that 1 < pwr < 6 and root**pwr = " + str(num))
else:
    lowNum = numList[0]
    for x in range(0,len(numList)):
        if lowNum[1] > numList[x][1]:
            lowNum = numList[x]
    print(str(lowNum[0]) + "**" + str(lowNum[1]) + " = " + str(num))




#Question Three

num = int(input("Enter an integer: "))
pwr = 2
root = 0 
numList = [] 
found = False
if num < 0:
    neg = True
else:
    neg = False
while pwr < 6:
    while abs(root**pwr) <= abs(num):
        if root**pwr == num:
            numList += [[root, pwr]]
            found = True
        if abs(root) > abs(num):
            root = 0
        elif neg:
            root -= 1
        else:
            root +=1
    pwr += 1
    root = 0
    
print(numList)
if not found:
    print("No pair of integers, 'root' and 'pwr', exists such that 1 < pwr < 6 and root**pwr = " + str(num))
else:
    lowNum = numList[0]
    for x in range(0,len(numList)):
        if lowNum[0] > numList[x][0]:
            lowNum = numList[x]
    print(str(lowNum[0]) + "**" + str(lowNum[1]) + " = " + str(num))




#Question Four

x = int(input('Enter an Integer: '))
y = input('Enter a Phrase')
num = 1

while num <= x:
    num += 1
    print (y)




#Question Five 
print('Enter an Integer')

list = []
odds = False

for i in range(1,11):
    i = int(input('Number: ')) 
    list.append(i)
    

list = sorted(list, reverse = True)

for x in list:
    if x%2 == 1:
        print('The largest odd number is', x)
        odds = True
        break

if odds == False:
    print('No odd number Entered')




#Question Six

x = input("Enter a string : ")

def y(str):
    
    sum = 0
    for c in str:
        if c.isdigit() == True: #Python String isdigit() method is a built-in method used for string handling.
            sum += int(c)

    return sum

print(y(x))




#Question Seven 

x = input('Enter Decimal Numbers Separated by Commas: ')
y = ''
total = 0
for c in x:
    y = y + c
    if c == ',':
        total = total + float(y[0:len(y)-1])
        y = ''
total = total + float(y) 
print ('The sum is', total)




#Question Eight 

y=int(input('Enter a positive number: '))
while(y<0):
    print('Please enter positive numbers')
    y=int(input('Enter a positive number: '))
    
        


start = 0
end = y
var = True
ans = 0
# Set precision
e = 0.0000001
while (var) :

        mid = (start + end) / 2
        if (y > (mid * mid)) :
            error = (y - (mid * mid))
        else :
            error = ((mid * mid) - y)

        if ((mid * mid) > y) :
                end = mid
        else :
                start = mid
                
        if (error <= e):
            var = False
            ans = mid

print("Square root of", y, "is",round(ans,7))




#Question Nine 

y = int(input('Enter an Integer'))
y= abs(y)

start = 0
end = y
var = True
x = 0
# Set precision
e = 0.0000001
while (var) :
        mid = (start + end) / 2
        if (y > (mid * mid * mid)) :
            error = (y - (mid * mid * mid))
        else :
            error = ((mid * mid * mid) - y)

        if ((mid * mid * mid) > y) :
                end = mid
        else :
                start = mid
                
        if (error <= e):
            var = False
            x = mid

print("Cubed root of", y, "is",round(x, 7))




#Question Ten

z = int(input("Enter a decimal number: "))
binary = 0
ctr = 0
temp = z 


while(temp > 0):
    binary = ((temp%2)*(10**ctr)) + binary
    temp = int(temp/2)
    ctr += 1


print("Binary of " + str(z) + " is "+ str(binary))

        
        